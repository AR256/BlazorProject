@page "/invoices/add"
@page "/invoices/edit/{id:guid}"
@inject InvoiceService InvoiceService
@inject TaxService TaxService
@inject CustomerService CustomerService
@inject ItemService ItemService
@inject InvoiceTypeService InvoiceTypeService
@inject NavigationManager NavigationManager
<div class="p-2 bg-light rounded rounded-3 border border-dark border-3">
    <h3 class="text-center mb-4">@((Id.HasValue ? "Edit" : "Create") + " Invoice")</h3>
    <EditForm Model="invoice" OnValidSubmit="SaveInvoice">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="row g-3 mb-4">
            <div class="col-md-6">
                <label for="type" class="form-label">Type:</label>
                <InputSelect id="item-name" class="form-select border border-1 border-dark" @bind-Value="invoice.InvoiceTypeId">
                    <option>--Select A Type--</option>
                    @foreach (var invoiceType in invoiceTypes)
                    {
                        <option value="@invoiceType.Id">@invoiceType.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="col-md-6">
                <label for="code" class="form-label">Invoice Code:</label>
                <InputText id="code" @bind-Value="invoice.Code" class="form-control  border border-1 border-dark" disabled />
            </div>
            <div class="col-md-6">
                <label for="customer" class="form-label">Customer:</label>
                <InputSelect id="item-name" class="form-select border border-1 border-dark" @bind-Value="invoice.CustomerId">
                    <option>--Select A Customer--</option>
                    @foreach (var customer in customers)
                    {
                        <option value="@customer.Id">@customer.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="col-md-6">
                <label class="form-label" for="date">Date Issued:</label>
                <input type="datetime-local" @bind="invoice.DateTimeIssued" class="form-control border border-1 border-dark" />
            </div>
        </div>

        <div class="mb-4">
            <h4>Items</h4>
            <button type="button" class="btn btn-dark mb-3" @onclick="AddNewItem">Add Item</button>
            @for (int i = 0; i < invoice.InvoiceItems.Count; i++)
            {
                <InvoiceItemComponent @bind-Item="invoice.InvoiceItems[i]" OnRemove="RemoveItem"
                                      ItemsList="items"
                                      TaxList="taxes" />
            }
        </div>

        <div class="text-dark me-3 p-3 bg-warning border border-3 border-dark rounded rounded-3 fw-bolder w-100 text-center d-flex justify-content-center">
            <label>Total Net Amount: </label>
            <span>@invoice.NetAmount</span>
        </div>

        <div class="d-flex justify-content-evenly mt-3">
            <button type="submit" class="btn btn-dark">Submit Invoice</button>
            <button type="button" class="btn btn-dark" @onclick="GoBack">Back</button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    public Guid? Id { get; set; }
    private Invoice invoice = new Invoice();
    private List<Customer> customers = new List<Customer>();
    private List<Item> items = new List<Item>();
    private List<Tax> taxes = new List<Tax>();
    private List<InvoiceType> invoiceTypes = new List<InvoiceType>();

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            // If there is an Id, fetch the existing invoice for editing
            invoice = await InvoiceService.GetInvoiceyIdAsync(Id.Value);
        }
        else
        {
            // If no Id, create a new invoice for adding
            invoice = new Invoice();
            invoice.DateTimeIssued = DateTime.Now;
        }
        // Load customers, items, and taxes from the services
        customers = await CustomerService.GetCustomersAsync();
        items = await ItemService.GetItemsAsync();
        taxes = await TaxService.GetTaxesAsync();
        invoiceTypes = await InvoiceTypeService.GetInvoiceTypesAsync();
    }
    private void GenerateInvoiceCode()
    {
        invoice.Code = $"INV-{DateTime.Now:yyyyMMdd}-{invoice.CustomerId}";
    }

    private void AddNewItem()
    {
        invoice.InvoiceItems.Add(new InvoiceItem());
    }

    private void RemoveItem(InvoiceItem item)
    {
        invoice.InvoiceItems.Remove(item);
    }

    private async Task SaveInvoice()
    {
        GenerateInvoiceCode();
        if (Id.HasValue)
        {
            // Update existing invoice
            await InvoiceService.UpdateInvoiceAsync(invoice);
        }
        else
        {
            // Add new invoice
            await InvoiceService.AddInvoiceAsync(invoice);
        }
        NavigationManager.NavigateTo("/invoices");
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/invoices");
    }
}
