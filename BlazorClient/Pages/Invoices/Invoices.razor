@page "/invoices"
@inject InvoiceService InvoiceService
@inject CustomerService CustomerService
@inject InvoiceTypeService InvoiceTypeService
@inject NavigationManager NavigationManager

<PageTitle>Invoices</PageTitle>
<h3>Invoices</h3>

<button class="btn btn-success" @onclick="AddNewInvoice">Add New Invoice</button>

<div class="dropdown my-2">
    <input type="text" @bind="searchTerm" @oninput="FilterInvoices" class="form-control" placeholder="Search by Customer Name or Code" autocomplete="off" />
</div>

<table class="table table-dark table-striped-columns">
    <thead>
        <tr>
            <th>Code</th>
            <th>Customer</th>
            <th>Date Issued</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (filteredInvoices != null && filteredInvoices.Any())
        {
            @foreach (var invoice in filteredInvoices.OrderByDescending(i => i.DateTimeIssued))
            {
                <tr>
                    <td>@invoice.Code</td>
                    <td>@customers.Find(i => i.Id == invoice.CustomerId).Name</td>
                    <td>@invoice.DateTimeIssued</td>
                    <td>
                        <button class="btn btn-outline-light" @onclick="() => EditInvoice(invoice.Id)">
                            <i class="bi bi-pencil-square"></i>
                        </button>
                        <button class="btn btn-outline-danger" @onclick="() => DeleteInvoice(invoice.Id)">
                            <i class="bi bi-trash"></i>
                        </button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="4">No items found</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Invoice> invoices;
    private List<Customer> customers;
    private List<InvoiceType> invoiceTypes;
    private List<Invoice> filteredInvoices = new List<Invoice>();
    private string searchTerm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        invoices = await InvoiceService.GetAllInvoicesAsync();
        customers = await CustomerService.GetCustomersAsync();
        invoiceTypes = await InvoiceTypeService.GetInvoiceTypesAsync();
        filteredInvoices = invoices;
    }
    private List<Invoice> FilteredInvoices
    {
        get
        {
            if (string.IsNullOrWhiteSpace(searchTerm))
                return new List<Invoice>();

            return invoices.Where(invoice =>
                customers.Find(c => c.Id == invoice.CustomerId).Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                invoice.Code.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
    }
    private void FilterInvoices(ChangeEventArgs? e = null)
    {
        if (e != null)
        {
            searchTerm = e.Value?.ToString();
        }
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredInvoices = invoices;
        }
        else
        {
            filteredInvoices = invoices
                .Where(invoice => customers.Find(c => c.Id == invoice.CustomerId).Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                               invoice.Code.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }
    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString();
        filteredInvoices = FilteredInvoices;
    }
    private void AddNewInvoice()
    {
        NavigationManager.NavigateTo("/invoices/add");
    }

    private void EditInvoice(Guid id)
    {
        NavigationManager.NavigateTo($"/invoices/edit/{id}");
    }

    private async Task DeleteInvoice(Guid id)
    {
        await InvoiceService.DeleteInvoiceAsync(id);
        invoices = await InvoiceService.GetAllInvoicesAsync();
    }
}
