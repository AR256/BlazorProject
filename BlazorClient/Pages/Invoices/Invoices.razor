@page "/invoices"
@inject InvoiceService InvoiceService
@inject CustomerService CustomerService
@inject NavigationManager NavigationManager

<h3>Invoices</h3>

<button class="btn btn-primary mb-3" @onclick="AddNewInvoice">Add Invoice</button>

@if (invoices == null)
{
    <p>Loading...</p>
}
else
{
    <div class="row">
        @foreach (var invoice in invoices)
        {
            <div class="col-md-4 mb-3">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">@invoice.Code</h5>
                        <h6 class="card-subtitle mb-2 text-muted">
                            @(customers.Where(c => c.Id == invoice.CustomerId).FirstOrDefault()?.Name ?? "Unknown Customer")
                        </h6>
                        <p class="card-text">Type: @invoice.Type</p>
                        <button class="btn btn-warning" @onclick="() => EditInvoice(invoice.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteInvoice(invoice.Id)">Delete</button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<Invoice> invoices;
    private List<Customer> customers;

    protected override async Task OnInitializedAsync()
    {
        invoices = await InvoiceService.GetAllInvoicesAsync();
        customers = await CustomerService.GetCustomersAsync();
    }

    private void AddNewInvoice()
    {
        NavigationManager.NavigateTo("/invoices/add");
    }

    private void EditInvoice(Guid id)
    {
        NavigationManager.NavigateTo($"/invoices/edit/{id}");
    }

    private async Task DeleteInvoice(Guid id)
    {
        await InvoiceService.DeleteInvoiceAsync(id);
        invoices = await InvoiceService.GetAllInvoicesAsync();
    }
}
