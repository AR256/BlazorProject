@page "/customers"
@inject CustomerService CustomerService
@inject NavigationManager Navigation

<PageTitle>Customers</PageTitle>
<h3>Customers</h3>

<a href="/customers/add" class="btn btn-success">Add New Customer</a>
<div class="dropdown mt-2">
    <input type="text" @bind="searchTerm" @oninput="FilterCustomers" class="form-control" placeholder="Search by Name or Code" autocomplete="off" />
</div>
@if (isLoading)
{
    <br />
    <div class="spinner-border mt-5" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}
else
{
    <table class="table table-hover">
        <thead>
            <tr>
                <th>Code</th>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (filteredCustomers != null && filteredCustomers.Any())
            {
                @foreach (var customer in filteredCustomers)
                {
                    <tr>
                        <td>@customer.Code</td>
                        <td>@customer.Name</td>
                        <td>
                            <a href="/customers/edit/@customer.Id" class="btn btn-outline-dark btn-sm">
                                <i class="bi bi-pencil-square"></i>
                            </a>
                            <a @onclick="async () => await DeleteCustomer(customer.Id)" class="btn btn-outline-danger btn-sm">
                                <i class="bi bi-trash"></i>
                            </a>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="3">No items found</td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    private string searchTerm = string.Empty;
    private List<Customer> customers = new();
    private bool isAddingcustomer = false;
    private bool isLoading = true;
    private List<Customer> filteredCustomers = new List<Customer>();
    private Customer selectedCustomer;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        customers = await CustomerService.GetCustomersAsync();
        filteredCustomers = customers;
        isLoading = false;
    }
    private List<Customer> FilteredTaxes
    {
        get
        {
            if (string.IsNullOrWhiteSpace(searchTerm))
                return new List<Customer>();

            return customers.Where(customer =>
                customer.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                customer.Code.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
    }
    private void SelectCustomer(Customer customer)
    {
        selectedCustomer = customer;
        searchTerm = customer.Name;
        filteredCustomers.Clear();
    }

    private void FilterCustomers(ChangeEventArgs? e = null)
    {
        if (e != null)
        {
            searchTerm = e.Value?.ToString();
        }
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredCustomers = customers;
        }
        else
        {
            filteredCustomers = customers
                .Where(customer => customer.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                               customer.Code.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }
    private void NavigateToAddCustomer()
    {
        Navigation.NavigateTo("/customers/add");
    }

    private void EditCustomer(Guid id)
    {
        Navigation.NavigateTo($"/customers/edit/{id}");
    }

    private async Task DeleteCustomer(Guid id)
    {
        await CustomerService.DeleteCustomerAsync(id);
        customers = await CustomerService.GetCustomersAsync();
        FilterCustomers();
        StateHasChanged();
    }
}
