@page "/items"
@inject ItemService ItemService
@inject NavigationManager Navigation


<h3>Items</h3>

<a href="/items/add" class="btn btn-primary">Add New Item</a>

@if (isLoading)
{
    <br />
    <div class="spinner-border mt-5" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}
else
{
    <table class="table table-hover">
        <thead>
            <tr>
                <th>Name</th>
                <th>Code</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (items != null)
            {
                @foreach (var item in items)
                {
                    <tr>
                        <td>@item.Name</td>
                        <td>@item.Code</td>
                        <td>
                            <a href="/items/edit/@item.Id" class="btn btn-primary">Edit</a>
                            <a @onclick="async () => await DeleteItem(item.Id)" class="btn btn-primary">Delete</a>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}
@code {
    private List<Item> items = new();
    private bool isAddingItem = false;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        items = await ItemService.GetItemsAsync();
        isLoading = false;
    }

    private void NavigateToAddItem()
    {
        Navigation.NavigateTo("/items/add");
    }

    private void EditItem(Guid id)
    {
        Navigation.NavigateTo($"/items/edit/{id}");
    }

    private async Task DeleteItem(Guid id)
    {
        await ItemService.DeleteItemAsync(id);
        items = await ItemService.GetItemsAsync(); // Refresh items list after deletion
    }
}
