@page "/items/add"
@page "/items/edit/{Id:guid}"
@inject ItemService ItemService
@inject NavigationManager Navigation
<PageTitle>@(isEdit ? "Edit Item" : "Add New Item")</PageTitle>
<h3>@(isEdit ? "Edit Item" : "Add New Item")</h3>

<EditForm method="post" FormName="EditOrAddNewItemForm" Model="item" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger">@ErrorMessage</div>
    }

    <div>
        <label for="name" class="form-label">Name:</label>
        <InputText id="name" @bind-Value="item.Name" class="form-control w-50" />
    </div>

    <div>
        <label for="code" class="form-label">Code:</label>
        <InputText id="code" @bind-Value="item.Code" class="form-control w-50" />
    </div>

    <button type="submit" class="btn btn-success mt-2">@((isEdit) ? "Save Changes" : "Add Item")</button>
</EditForm>

<a href="/items" class="btn btn-secondary mt-2">Cancel</a>


@code {
    [Parameter]
    public Guid? Id { get; set; }
    [SupplyParameterFromForm]
    public  Item item { get; set; } = new();
    private bool isEdit = false;
    private string ErrorMessage;
    protected override async Task OnInitializedAsync()
    {
        isEdit = Id.HasValue;

        if (isEdit)
        {
            // If editing, load the item details
            item = await ItemService.GetItemByIdAsync(Id.Value);
        }
    }
    private async Task HandleValidSubmit()
    {
        try
        {
            if (isEdit)
            {
                // Edit existing item
                var response = await ItemService.UpdateItemAsync(item);
                if (response.IsSuccessStatusCode)
                {
                    var successMessage = await response.Content.ReadFromJsonAsync<ApiResponse>();
                    ErrorMessage = successMessage.Message;
                    Navigation.NavigateTo("/items");
                }
                else
                {
                    var result = await response.Content.ReadFromJsonAsync<ApiResponse>();
                    ErrorMessage = result.Message;
                }
            }
            else
            {
                    var response = await ItemService.AddItemAsync(item);
                    if (response.IsSuccessStatusCode)
                    {
                        var successMessage = await response.Content.ReadFromJsonAsync<ApiResponse>();
                        ErrorMessage = successMessage.Message;
                        Navigation.NavigateTo("/items");
                    }
                    else
                    {
                        var result = await response.Content.ReadFromJsonAsync<ApiResponse>();
                        ErrorMessage = result.Message;
                    }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }

    }

}
