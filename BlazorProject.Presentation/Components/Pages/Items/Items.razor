@page "/items"
@inject IMediator Mediator
@inject NavigationManager Navigation


<h3>Items</h3>

<a href="/items/add" class="btn btn-primary">Add New Item</a>

<table class="table table-hover">
    <thead>
        <tr>
            <th>Name</th>
            <th>Code</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (items != null)
        {
            @foreach (var item in items)
            {
                <tr>
                    <td>@item.Name</td>
                    <td>@item.Code</td>
                    <td>
                        <a href="/items/edit/@item.Id" class="btn btn-primary">Edit</a>
                        <a @onclick="async () => await DeleteItem(item.Id)" class="btn btn-primary">Delete</a>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>
@code {
    private List<CustomerDto> items = new();
    private bool isAddingItem = false;

    protected override async Task OnInitializedAsync()
    {
        items = await Mediator.Send(new GetItemsQuery());
    }

    private void NavigateToAddItem()
    {
        Navigation.NavigateTo("/items/add");
    }

    private void EditItem(Guid id)
    {
        Navigation.NavigateTo($"/items/edit/{id}");
    }

    private async Task DeleteItem(Guid id)
    {
        await Mediator.Send(new DeleteItemCommand(id));
        items = await Mediator.Send(new GetItemsQuery()); // Refresh items list after deletion
        StateHasChanged();
    }
}
