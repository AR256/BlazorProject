@page "/invoices"
@inject InvoiceService InvoiceService
@inject CustomerService CustomerService
@inject InvoiceTypeService InvoiceTypeService
@inject NavigationManager NavigationManager

<PageTitle>Invoices</PageTitle>
<h3>Invoices</h3>

<button class="btn btn-success mb-3" @onclick="AddNewInvoice">Add Invoice</button>
<table class="table table-dark table-striped-columns">
    <thead>
        <tr>
            <th>Code</th>
            <th>Customer</th>
            <th>Date Issued</th>
            <th>Net Amount</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (invoices == null)
        {
            <tr>Loading...</tr>
        }
        else
        {
            @foreach (var invoice in invoices.OrderByDescending(i => i.DateTimeIssued))
            {
                <tr>
                    <td>@invoice.Code</td>
                    <td>@customers.Find(i => i.Id ==invoice.CustomerId).Name</td>
                    <td>@invoice.DateTimeIssued</td>
                    <td>@invoice.NetAmount.ToString("C")</td>
                    <td>
                        <button class="btn btn-outline-light" @onclick="() => EditInvoice(invoice.Id)">
                            <i class="bi bi-pencil-square"></i>
                        </button>
                        <button class="btn btn-outline-danger" @onclick="() => DeleteInvoice(invoice.Id)">
                            <i class="bi bi-trash"></i>
                        </button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    private List<Invoice> invoices;
    private List<Customer> customers;
    private List<InvoiceType> invoiceTypes;

    protected override async Task OnInitializedAsync()
    {
        invoices = await InvoiceService.GetAllInvoicesAsync();
        customers = await CustomerService.GetCustomersAsync();
        invoiceTypes = await InvoiceTypeService.GetInvoiceTypesAsync();
    }

    private void AddNewInvoice()
    {
        NavigationManager.NavigateTo("/invoices/add");
    }

    private void EditInvoice(Guid id)
    {
        NavigationManager.NavigateTo($"/invoices/edit/{id}");
    }

    private async Task DeleteInvoice(Guid id)
    {
        await InvoiceService.DeleteInvoiceAsync(id);
        invoices = await InvoiceService.GetAllInvoicesAsync();
    }
}
