
<div>
    <h4 class="bg-success text-white ps-2 mb-0">Items</h4>
    <table class="table table-bordered table-hover m-0 bg-dark text-light border-success">
        <thead>
            <tr>
                <th>ID</th>
                <th>Quantity</th>
                <th>Amount</th>
                <th>Item Total</th>
                <th>Net Amount</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Items.OrderBy(i => i.CreationDate))
            {
                <tr>
                    <td>
                        <InputSelect id="item-name" class="form-select" @bind-Value="item.ItemId" @oninput="() => OnAmountChanged(item.Id)">
                            @foreach (var availableItem in ItemsList)
                            {
                                <option value="@availableItem.Id">@availableItem.Name</option>
                            }
                        </InputSelect>
                    </td>
                    <td>
                        <InputNumber id="quantity" class="form-control" @bind-Value="item.Quantity" @oninput="() => OnAmountChanged(item.Id)" />
                    </td>
                    <td>
                        <InputNumber id="amountSold" class="form-control" @bind-Value="item.Amount" @oninput="() => OnAmountChanged(item.Id)" />
                    </td>
                    <td>
                        <span class="form-control border-2 border-primary">@item.Total.ToString("C")</span>
                    </td>
                    <td>
                        <span class="form-control border-2 border-primary">@item.NetAmount.ToString("C")</span>
                    </td>
                    <td>
                        <button class="btn btn-outline-light btn-sm" type="button" @onclick="() => ShowPopup(item)">
                            Edit Taxes
                        </button>
                        <a @onclick="() => DeleteItem(item.Id)" class="btn btn-outline-danger btn-sm">
                            <i class="bi bi-trash"></i>
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
@if (showPopup)
{
    <div class="modal fade show d-block" style="background-color:rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-dark text-light">
                    <h5 class="modal-title">Edit Taxes</h5>
                    <button type="button" class="btn-close bg-light" @onclick="ClosePopup"></button>
                </div>
                <div class="modal-body bg-light">
                    <InvoiceTaxComponent InvoiceTaxes="selectedItem.Taxes"
                                         InvoiceTaxList="TaxList"
                                         InvoiceTaxesChanged="() => OnAmountChanged(selectedItem.Id)" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-dark" @onclick="ClosePopup">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public List<InvoiceItem> Items { get; set; }
    [Parameter]
    public List<Item> ItemsList { get; set; }
    [Parameter]
    public List<Tax> TaxList { get; set; }
    [Parameter]
    public EventCallback<InvoiceItem> OnRemove { get; set; }
    [Parameter]
    public EventCallback<List<InvoiceItem>> ItemsChanged { get; set; }
    private bool showPopup = false;
    private InvoiceItem selectedItem;

    private void ShowPopup(InvoiceItem item)
    {
        selectedItem = item;
        showPopup = true;
    }
    private void ClosePopup()
    {
        showPopup = false;
    }
    private async Task OnAmountChanged(Guid id)
    {
        var item = Items.Find(i => i.Id == id);
        item.ModificationDate = DateTime.Now;
        await ItemsChanged.InvokeAsync();
    }
    private void DeleteItem(Guid id)
    {
        var item = Items.Find(i => i.Id == id);
        Items.Remove(item);
    }
}
