@page "/invoices/add"
@page "/invoices/edit/{id:guid}"
@inject InvoiceService InvoiceService
@inject TaxService TaxService
@inject CustomerService CustomerService
@inject ItemService ItemService
@inject NavigationManager NavigationManager

<h3 class="text-center mb-4">@((Id.HasValue ? "Edit" : "Create") + " Invoice")</h3>

<EditForm Model="invoice" OnValidSubmit="SaveInvoice">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row g-3 mb-4">
        <div class="col-md-4">
            <label for="type" class="form-label">Type:</label>
            <InputSelect id="type" @bind-Value="invoice.Type" class="form-select">
                @foreach (var type in Enum.GetValues(typeof(InvoiceType)).Cast<InvoiceType>())
                {
                    <option value="@((int)type)">@type.ToString()</option>
                }
            </InputSelect>
        </div>
        <div class="col-md-4">
            <label for="code" class="form-label">Invoice Code:</label>
            <InputText id="code" @bind-Value="invoice.Code" class="form-control" />
        </div>
        <div class="col-md-4">
            <label for="customer" class="form-label">Customer:</label>
            <CustomSelectInput @bind-Value="invoice.CustomerId">
                <option value="">--Select Customer--</option>
                @foreach (var customer in customers)
                {
                    <option value="@customer.Id.ToString()">@customer.Name</option>
                }
            </CustomSelectInput>
        </div>
        <div class="col-md-4">
            <label class="form-label" for="date">Date Issued:</label>
            <input type="datetime-local" @bind="invoice.DateTimeIssued" class="form-control"/>
        </div>
    </div>

    <div class="mb-4">
        <h4>Items</h4>
        <button type="button" class="btn btn-success mb-3" @onclick="AddNewItem">Add New Item</button>
        @for (int i = 0; i < invoice.InvoiceItems.Count; i++)
        {
            <InvoiceItemComponent @bind-Item="invoice.InvoiceItems[i]" OnRemove="RemoveItem"
                                  ItemsList="items"
                                  TaxList="taxes" />
        }
    </div>

    <div class="text-end">
        <label>Total Net Amount: </label>
        <span>@invoice.NetAmount</span>
    </div>

    <div class="d-flex justify-content-between">
        <button type="submit" class="btn btn-primary">Submit Invoice</button>
        <button type="button" class="btn btn-secondary" @onclick="GoBack">Back</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public Guid? Id { get; set; }
    private Invoice invoice = new Invoice();
    private List<Customer> customers = new List<Customer>();
    private List<Item> items = new List<Item>();
    private List<Tax> taxes = new List<Tax>();

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            // If there is an Id, fetch the existing invoice for editing
            invoice = await InvoiceService.GetInvoiceyIdAsync(Id.Value);
        }
        else
        {
            // If no Id, create a new invoice for adding
            invoice = new Invoice();
        }
        // Load customers, items, and taxes from the services
        customers = await CustomerService.GetCustomersAsync();
        items = await ItemService.GetItemsAsync();
        taxes = await TaxService.GetTaxesAsync();
    }

    private void AddNewItem()
    {
        invoice.InvoiceItems.Add(new InvoiceItem());
    }

    private void RemoveItem(InvoiceItem item)
    {
        invoice.InvoiceItems.Remove(item);
    }

    private async Task SaveInvoice()
    {
        if (Id.HasValue)
        {
            // Update existing invoice
            await InvoiceService.UpdateInvoiceAsync(invoice);
        }
        else
        {
            // Add new invoice
            await InvoiceService.AddInvoiceAsync(invoice);
        }
        NavigationManager.NavigateTo("/invoices");
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/invoices");
    }
}
