
<button type="button" class="btn btn-dark mb-3" @onclick="AddNewTax">Add Tax</button>
@foreach(var invoiceTax in InvoiceTaxes.OrderBy(t => t.CreationDate))
{
    <div class="row g-3 align-items-end my-2 text-light bg-dark border border-3 border-info rounded-3">
        <div class="col-md-6 my-4">
            <label for="taxName" class="form-label">Tax Name:</label>
            <InputSelect class="form-select" @bind-Value="invoiceTax.TaxId" @onchange="NotifyTaxChange">
                <option>--Select A Tax--</option>
                @foreach (var availableTax in InvoiceTaxList)
                {
                    <option value="@availableTax.Id">@availableTax.Name</option>
                }
                </InputSelect>
        </div>
        <div class="col-md-4 pb-4">
            <label for="taxAmount" class="form-label">Tax Amount:</label>
            <InputNumber id="taxAmount" class="form-control" @bind-Value="invoiceTax.Amount" @oninput="NotifyTaxChange" />
        </div>
        <div class="col-md-2 pb-4">
            <a @onclick="() => RemoveThisTax(invoiceTax.Id)" class="btn btn-outline-danger btn-sm">
                <i class="bi bi-trash"></i>
            </a>
        </div>
        <ValidationMessage For="@(() => invoiceTax.TaxId)" />
        <ValidationMessage For="@(() => invoiceTax.Amount)" />
    </div>
}

@code {
    [Parameter]
    public List<InvoiceItemTax> InvoiceTaxes { get; set; }
    [Parameter]
    public List<Tax> InvoiceTaxList { get; set; }
    [Parameter]
    public EventCallback<List<InvoiceItemTax>> InvoiceTaxesChanged { get; set; }
    private async Task RemoveThisTax(Guid id)
    {
        var invoiceTax = InvoiceTaxes.Find(t => t.Id == id);
        InvoiceTaxes.Remove(invoiceTax);
        await InvoiceTaxesChanged.InvokeAsync();
    }
    private async Task AddNewTax()
    {
        InvoiceTaxes.Add(new InvoiceItemTax() { CreationDate = DateTime.Now, ModificationDate = DateTime.Now });
        await InvoiceTaxesChanged.InvokeAsync();
    }
    private async Task NotifyTaxChange()
    {
        await InvoiceTaxesChanged.InvokeAsync();
    }
}
